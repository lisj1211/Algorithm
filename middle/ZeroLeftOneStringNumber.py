# -*- coding: utf-8 -*-
# 字符串只由'0'和'1'两种字符构成，
# 当字符串长度为1时，所有可能的字符串为"0"、"1"；
# 当字符串长度为2时，所有可能的字符串为"00"、"01"、"10"、"11"；
# 当字符串长度为3时，所有可能的字符串为"000"、"001"、"010"、"011"、"100"、"101"、"110"、"111"
# ... 如果某一个字符串中，只要是出现'0'的位置，左边就靠着'1'，这样的字符串叫作达
# 标字符串。
# 给定一个正数N，返回所有长度为N的字符串中，达标字符串的数量。
# 比如，N=3，返回3，因为只有"101"、"110"、"111"达标。


# 【打表】
# N=1，返回1，因为只有"1"达标。
# N=2，返回2，因为只有"10","11"达标。
# N=3，返回3，因为只有"101"、"110"、"111"达标。
# N=4，返回5，因为只有"1010"、"1011"、"1101"、"1110"、"1111"达标。
# N=5，返回8，因为只有"10101"、"10110"、"10111"、"11010"、"11011"、"11101"、"11110"、"11111"达标。
# [1, 2, 3, 5, 8, ```] 斐波那契数列


def valid_number(n):
    """
    矩阵快速幂参考 Fibonacci.py
    :param n:
    :return:
    """
    if n < 4:
        return n

    return valid_number(n - 1) + valid_number(n - 2)


def get_string_list(n):
    lst = []
    f(n, 0, "", lst)
    print(lst)


def f(n, index, tmp, lst):
    if index == n:
        lst.append(tmp)
        return
    tmp += "0"
    f(n, index + 1, tmp, lst)
    tmp = tmp[:-1]
    tmp += "1"
    f(n, index + 1, tmp, lst)


if __name__ == '__main__':
    get_string_list(5)
    print(valid_number(5))
